---
swagger: "2.0"
info:
  version: "0.0.1"
  title: "Каталог музыки"

host: "localhost:8080"
basePath: "/v1"
tags:
  - name: "Треки"
    description: "Операции с треками."

  - name: "Альбомы"
    description: "Операции с альбомами."

  - name: "Страны"
    description: "Операции со странами."

  - name: "Лейблы"
    description: "Операции с лейблами."

  - name: "Исполнители"
    description: "Операции с исполнителями"

schemes:
  - "http"

paths:
  # -- Track specific paths
  /track:
    get:
      tags:
        - "Треки"
      summary: "Возвращает все треки из сервиса с включенной пагинацией"
      parameters:
        - name: "start"
          description: "С какой записи начать вывод. Начало по умолчанию с 0."
          in: "query"
          type: "integer"
          format: "int64"
          default: 0

        - name: "limit"
          description: "Как много записей вернуть. Значение должно быть меньше 20. Значение по умолчанию 10."
          in: "query"
          type: "integer"
          format: "int32"
          default: 10
          maximum: 20

        - name: "sort"
          description: "По какому значению сортировать записи."
          in: "query"
          type: "string"
          enum:
            - "byDateInc"
            - "byDateDesc"

      produces:
        - application/json
      responses:
        200:
          description: "Successful response."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Track"
        404:
          description: "Not found."
    post:
      tags:
        - "Треки"
      summary: "Добавляет трек в сервис."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          required: true
          description: "Payload data."
          schema:
            $ref: "#/definitions/Track"
      responses:
        200:
          description: "Successful response."
        404:
          description: "Not found"
    put:
      tags:
        - "Треки"
      summary: "Обновляет трек в сервисе."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          required: true
          description: "Payload data."
          schema:
            $ref: "#/definitions/Track"
      responses:
        200:
          description: "Successful response."
        404:
          description: "Not found."
  /track/{id}:
    get:
      tags:
        - "Треки"
      summary: "Получает конкретный трек из сервиса по ID."
      parameters:
        - name: "id"
          required: true
          in: "path"
          type: "integer"
          format: "int64"
      produces:
        - application/json
      responses:
        200:
          description: "Successful response."
          schema:
            $ref: "#/definitions/Track"
        404:
          description: "Not found."
    delete:
      tags:
        - "Треки"
      summary: "Удаляет конкретный трек из сервиса по ID."
      parameters:
        - name: "id"
          required: true
          in: "path"
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successful response."
        404:
          description: "Not found."
  # -- Artist specific paths
  /artist:
    get:
      tags:
        - "Исполнители"
      summary: "Возвращает всех исполнителей из сервиса с включенной пагинацией"
      parameters:
        - name: "start"
          description: "С какой записи начать вывод. Начало по умолчанию с 0."
          in: "query"
          type: "integer"
          format: "int64"
          default: 0

        - name: "limit"
          description: "Как много записей вернуть. Значение должно быть меньше 20. Значение по умолчанию 10."
          in: "query"
          type: "integer"
          format: "int32"
          default: 10
          maximum: 20

        - name: "sort"
          description: "По какому значению сортировать записи."
          in: "query"
          type: "string"
          enum:
            - "byDateInc"
            - "byDateDesc"

      produces:
        - application/json
      responses:
        200:
          description: "Successful response."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Artist"
        404:
          description: "Not found."
    post:
      tags:
        - "Исполнители"
      summary: "Добавляет исполнителя в сервис."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          required: true
          description: "Payload data."
          schema:
            $ref: "#/definitions/Artist"
      responses:
        200:
          description: "Successful response."
        404:
          description: "Not found"
    put:
      tags:
        - "Исполнители"
      summary: "Обновляет исполнителя в сервисе."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          required: true
          description: "Payload data."
          schema:
            $ref: "#/definitions/Artist"
      responses:
        200:
          description: "Successful response."
        404:
          description: "Not found."
  /artist/{id}:
    get:
      tags:
        - "Исполнители"
      summary: "Получает конкретного исполнителя из сервиса по ID."
      parameters:
        - name: "id"
          required: true
          in: "path"
          type: "integer"
          format: "int64"
      produces:
        - application/json
      responses:
        200:
          description: "Successful response."
          schema:
            $ref: "#/definitions/Artist"
        404:
          description: "Not found."
    delete:
      tags:
        - "Исполнители"
      summary: "Удаляет конкретного исполнителя из сервиса по ID."
      parameters:
        - name: "id"
          required: true
          in: "path"
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successful response."
        404:
          description: "Not found."
  # -- Label specific paths
  /label:
    get:
      tags:
        - "Лейблы"
      summary: "Возвращает все лейблы из сервиса с включенной пагинацией"
      parameters:
        - name: "start"
          description: "С какой записи начать вывод. Начало по умолчанию с 0."
          in: "query"
          type: "integer"
          format: "int64"
          default: 0

        - name: "limit"
          description: "Как много записей вернуть. Значение должно быть меньше 20. Значение по умолчанию 10."
          in: "query"
          type: "integer"
          format: "int32"
          default: 10
          maximum: 20

        - name: "sort"
          description: "По какому значению сортировать записи."
          in: "query"
          type: "string"
          enum:
            - "byDateInc"
            - "byDateDesc"

      produces:
        - application/json
      responses:
        200:
          description: "Successful response."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Label"
        404:
          description: "Not found."
    post:
      tags:
        - "Лейблы"
      summary: "Добавляет лейбл в сервис."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          required: true
          description: "Payload data."
          schema:
            $ref: "#/definitions/Label"
      responses:
        200:
          description: "Successful response."
        404:
          description: "Not found"
    put:
      tags:
        - "Лейблы"
      summary: "Обновляет лейбл в сервисе."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          required: true
          description: "Payload data."
          schema:
            $ref: "#/definitions/Label"
      responses:
        200:
          description: "Successful response."
        404:
          description: "Not found."
  /label/{id}:
    get:
      tags:
        - "Лейблы"
      summary: "Получает конкретный лейбл из сервиса по ID."
      parameters:
        - name: "id"
          required: true
          in: "path"
          type: "integer"
          format: "int64"
      produces:
        - application/json
      responses:
        200:
          description: "Successful response."
          schema:
            $ref: "#/definitions/Label"
        404:
          description: "Not found."
    delete:
      tags:
        - "Лейблы"
      summary: "Удаляет конкретный лейбл из сервиса по ID."
      parameters:
        - name: "id"
          required: true
          in: "path"
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successful response."
        404:
          description: "Not found."
  # -- Album specific paths
  /album:
    get:
      tags:
        - "Альбомы"
      summary: "Возвращает все альбомы из сервиса с включенной пагинацией"
      parameters:
        - name: "start"
          description: "С какой записи начать вывод. Начало по умолчанию с 0."
          in: "query"
          type: "integer"
          format: "int64"
          default: 0

        - name: "limit"
          description: "Как много записей вернуть. Значение должно быть меньше 20. Значение по умолчанию 10."
          in: "query"
          type: "integer"
          format: "int32"
          default: 10
          maximum: 20

        - name: "sort"
          description: "По какому значению сортировать записи."
          in: "query"
          type: "string"
          enum:
            - "byDateInc"
            - "byDateDesc"

      produces:
        - application/json
      responses:
        200:
          description: "Successful response."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Album"
        404:
          description: "Not found."
    post:
      tags:
        - "Альбомы"
      summary: "Добавляет альбом в сервис."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          required: true
          description: "Payload data."
          schema:
            $ref: "#/definitions/Album"
      responses:
        200:
          description: "Successful response."
        404:
          description: "Not found"
    put:
      tags:
        - "Альбомы"
      summary: "Обновляет альбом в сервисе."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          required: true
          description: "Payload data."
          schema:
            $ref: "#/definitions/Album"
      responses:
        200:
          description: "Successful response."
        404:
          description: "Not found."
  /album/{id}:
    get:
      tags:
        - "Альбомы"
      summary: "Получает конкретный альбом из сервиса по ID."
      parameters:
        - name: "id"
          required: true
          in: "path"
          type: "integer"
          format: "int64"
      produces:
        - application/json
      responses:
        200:
          description: "Successful response."
          schema:
            $ref: "#/definitions/Album"
        404:
          description: "Not found."
    delete:
      tags:
        - "Альбомы"
      summary: "Удаляет конкретный альбом из сервиса по ID."
      parameters:
        - name: "id"
          required: true
          in: "path"
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successful response."
        404:
          description: "Not found."

  # -- Album specific paths
  /country:
    get:
      tags:
        - "Страны"
      summary: "Возвращает все страны из сервиса с включенной пагинацией"
      parameters:
        - name: "start"
          description: "С какой записи начать вывод. Начало по умолчанию с 0."
          in: "query"
          type: "integer"
          format: "int64"
          default: 0

        - name: "limit"
          description: "Как много записей вернуть. Значение должно быть меньше 20. Значение по умолчанию 10."
          in: "query"
          type: "integer"
          format: "int32"
          default: 10
          maximum: 20

        - name: "sort"
          description: "По какому значению сортировать записи."
          in: "query"
          type: "string"
          enum:
            - "byDateInc"
            - "byDateDesc"

      produces:
        - application/json
      responses:
        200:
          description: "Successful response."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Country"
        404:
          description: "Not found."
    post:
      tags:
        - "Страны"
      summary: "Добавляет страну в сервис."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          required: true
          description: "Payload data."
          schema:
            $ref: "#/definitions/Country"
      responses:
        200:
          description: "Successful response."
        404:
          description: "Not found"
    put:
      tags:
        - "Страны"
      summary: "Обновляет страну в сервисе."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          required: true
          description: "Payload data."
          schema:
            $ref: "#/definitions/Country"
      responses:
        200:
          description: "Successful response."
        404:
          description: "Not found."
  /country/{id}:
    get:
      tags:
        - "Страны"
      summary: "Получает конкретный страну из сервиса по ID."
      parameters:
        - name: "id"
          required: true
          in: "path"
          type: "integer"
          format: "int64"
      produces:
        - application/json
      responses:
        200:
          description: "Successful response."
          schema:
            $ref: "#/definitions/Country"
        404:
          description: "Not found."
    delete:
      tags:
        - "Страны"
      summary: "Удаляет конкретный страну из сервиса по ID."
      parameters:
        - name: "id"
          required: true
          in: "path"
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successful response."
        404:
          description: "Not found."
definitions:
  Track:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "Never gonna give you up"
      albumId:
        type: "integer"
        format: "int64"
      listens:
        type: "integer"
        format: "int64"
      favorites:
        type: "integer"
        format: "int64"
      length:
        type: "integer"
        format: "int64"
  Artist:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Rick"
      surname:
        type: "string"
        example: "Astley"
      dateOfBirth:
        type: "string"
        format: "date-time"
        example: "1966-02-06"
      countryId:
        type: "integer"
        format: "int64"
  Label:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Album:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      labelId:
        type: "integer"
        format: "int64"
      releaseDate:
        type: "string"
        format: "date"
  Country:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
